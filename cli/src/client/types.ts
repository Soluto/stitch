// Autogenerated from https://graphql-code-generator.com/#live-demo

export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  JSON: any;
  JSONObject: any;
};

export type ResourceMetadataInput = {
  namespace: Scalars['String'];
  name: Scalars['String'];
};

export type Result = {
  __typename?: 'Result';
  success: Scalars['Boolean'];
};

export type ResourceGroupInput = {
  schemas?: Maybe<Array<SchemaInput>>;
  upstreams?: Maybe<Array<UpstreamInput>>;
  upstreamClientCredentials?: Maybe<Array<UpstreamClientCredentialsInput>>;
  policies?: Maybe<Array<PolicyInput>>;
};

export type Query = {
  __typename?: 'Query';
  validateResourceGroup?: Maybe<Result>;
  validateSchemas?: Maybe<Result>;
  validateUpstreams?: Maybe<Result>;
  validateUpstreamClientCredentials?: Maybe<Result>;
  validatePolicies?: Maybe<Result>;
};

export type QueryValidateResourceGroupArgs = {
  input: ResourceGroupInput;
};

export type QueryValidateSchemasArgs = {
  input: Array<SchemaInput>;
};

export type QueryValidateUpstreamsArgs = {
  input: Array<UpstreamInput>;
};

export type QueryValidateUpstreamClientCredentialsArgs = {
  input: Array<UpstreamClientCredentialsInput>;
};

export type QueryValidatePoliciesArgs = {
  input: Array<PolicyInput>;
};

export type Mutation = {
  __typename?: 'Mutation';
  updateResourceGroup?: Maybe<Result>;
  updateSchemas?: Maybe<Result>;
  updateUpstreams?: Maybe<Result>;
  updateUpstreamClientCredentials?: Maybe<Result>;
  updatePolicies?: Maybe<Result>;
  updateBasePolicy?: Maybe<Result>;
  updateIntrospectionQueryPolicy?: Maybe<Result>;
};

export type MutationUpdateResourceGroupArgs = {
  input: ResourceGroupInput;
};

export type MutationUpdateSchemasArgs = {
  input: Array<SchemaInput>;
};

export type MutationUpdateUpstreamsArgs = {
  input: Array<UpstreamInput>;
};

export type MutationUpdateUpstreamClientCredentialsArgs = {
  input: Array<UpstreamClientCredentialsInput>;
};

export type MutationUpdatePoliciesArgs = {
  input: Array<PolicyInput>;
};

export type MutationUpdateBasePolicyArgs = {
  input: BasePolicyInput;
};

export type MutationUpdateIntrospectionQueryPolicyArgs = {
  input: BasePolicyInput;
};

export type SchemaInput = {
  metadata: ResourceMetadataInput;
  schema: Scalars['String'];
};

export enum AuthType {
  ActiveDirectory = 'ActiveDirectory',
}

/**
 * GraphQL doesn't support unions for input types, otherwise this would be a union of different auth types.
 * Instead, the AuthType enum indicates which auth type is needed, and there's a property which corresponds to each auth type, which we validate in the registry.
 */
export type AuthInput = {
  type: AuthType;
  activeDirectory: ActiveDirectoryAuthInput;
};

export type ActiveDirectoryAuthInput = {
  authority: Scalars['String'];
  resource: Scalars['String'];
};

export type UpstreamInput = {
  metadata: ResourceMetadataInput;
  host: Scalars['String'];
  auth: AuthInput;
};

export type ActiveDirectoryCredentials = {
  authority: Scalars['String'];
  clientId: Scalars['String'];
  clientSecret: Scalars['String'];
};

/**
 * GraphQL doesn't support unions for input types, otherwise this would be a union of different auth types.
 * Instead, the AuthType enum indicates which auth type is needed, and there's a property which corresponds to each auth type, which we validate in the registry.
 */
export type UpstreamClientCredentialsInput = {
  metadata: ResourceMetadataInput;
  authType: AuthType;
  activeDirectory: ActiveDirectoryCredentials;
};

export enum PolicyType {
  Opa = 'opa',
}

export type PolicyQueryInput = {
  gql: Scalars['String'];
  variables?: Maybe<Scalars['JSONObject']>;
};

export type PolicyInput = {
  metadata: ResourceMetadataInput;
  type: PolicyType;
  shouldOverrideBasePolicy?: Maybe<Scalars['Boolean']>;
  code: Scalars['String'];
  args?: Maybe<Scalars['JSONObject']>;
  query?: Maybe<PolicyQueryInput>;
};

export type BasePolicyInput = {
  namespace: Scalars['String'];
  name: Scalars['String'];
  args?: Maybe<Scalars['JSONObject']>;
};

export type BasePolicyInput = {
  namespace: Scalars['String'];
  name: Scalars['String'];
  args?: Maybe<Scalars['JSONObject']>;
};
